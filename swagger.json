{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.1",
    "title": "API documentation for project E-pharmacy Admin Dashboard.",
    "description": "E-Pharmacy API BackEnd",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "http://localhost:3000/" },
    { "url": "https://backend-admin-ht2s.onrender.com" }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Authorization endpoints for user ( admin )"
    },
    {
      "name": "Dashboard",
      "description": "Endpoints for get information about last orders, income/expense and statistics"
    },
    {
      "name": "Customers",
      "description": "Endpoint for requesting information about all customers and search by query"
    },
    {
      "name": "Orders",
      "description": "Endpoint for get all orders list and search by query"
    },
    {
      "name": "Products",
      "description": "Endpoint for get all products list, add, delete, edit and search by query"
    },
    {
      "name": "Suppliers",
      "description": "Endpoint for get all suppliers list, add, edit and search by query"
    }
  ],
  "paths": {
    "/api/user/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login existing admin",
        "parameters": [],
        "requestBody": {
          "description": "# Description of the request parameters:\n**email** - string, user email.\n **password** - string, encrypted user password.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created session for existing admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  }
                },
                "example": {
                  "message": "Bad request"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Email or password is wrong"
                    }
                  }
                },
                "example": {
                  "message": "Email or password is wrong"
                }
              }
            }
          },
          "403": {
            "description": "Email not verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Email not verified"
                    }
                  }
                },
                "example": {
                  "message": "Email not verified"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Not found"
                    }
                  }
                },
                "example": {
                  "message": "Not found"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Server error",
                      "example": "Email or password is wrong"
                    }
                  }
                },
                "example": {
                  "message": "Email or password is wrong"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/logout": {
      "get": {
        "tags": ["User"],
        "summary": "Signs out admin",
        "parameters": [],
        "description": "Logout endpoint is a logout mechanism that terminates a admin's session and destroys the access token issued during pre-authentication. \n Description:  When a user clicks the logout button, it requests URL/user/logout with a valid token in the authorization header. The server checks the validity of the token, if the token is valid, the user's session is closed, the token is removed and the user is returned to the login page. If the token is invalid, the server returns a 401 status and informs the user that the token is invalid.",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Logout success"
          },
          "204": {
            "description": "Logout success"
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error."
                    }
                  }
                },
                "example": {
                  "message": "Not authorized."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "securityDefinitions": {
      "BearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "Admin's email",
            "example": "frederiko@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "Admin's password",
            "example": "asdfg12345@"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token for admin",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE2MjQwNzQwNzMsImV4cCI6MTYyNDA3NzY3M30.7"
          },
          "email": {
            "type": "string",
            "description": "Admin's email",
            "example": "frederiko@gmail.com"
          },
          "_id": {
            "type": "string",
            "description": "Admin's id",
            "example": "669e89e547fdff8b634c8e1d"
          },
          "name": {
            "type": "string",
            "description": "Admin's name",
            "example": "Frederiko"
          }
        }
      }
    }
  }
}
